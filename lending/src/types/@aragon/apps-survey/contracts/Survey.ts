/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface SurveyInterface extends utils.Interface {
  functions: {
    "changeMinAcceptParticipationPct(uint64)": FunctionFragment;
    "hasInitialized()": FunctionFragment;
    "resetVote(uint256)": FunctionFragment;
    "minParticipationPct()": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "getVoterState(uint256,address)": FunctionFragment;
    "MODIFY_PARTICIPATION_ROLE()": FunctionFragment;
    "voteOption(uint256,uint256)": FunctionFragment;
    "isParticipationAchieved(uint256)": FunctionFragment;
    "voteOptions(uint256,uint256[],uint256[])": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "getSurvey(uint256)": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "surveyTime()": FunctionFragment;
    "initialize(address,uint64,uint64)": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "CREATE_SURVEYS_ROLE()": FunctionFragment;
    "ABSTAIN_VOTE()": FunctionFragment;
    "getOptionPower(uint256,uint256)": FunctionFragment;
    "canVote(uint256,address)": FunctionFragment;
    "kernel()": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "surveysLength()": FunctionFragment;
    "token()": FunctionFragment;
    "PCT_BASE()": FunctionFragment;
    "newSurvey(string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeMinAcceptParticipationPct"
      | "hasInitialized"
      | "resetVote"
      | "minParticipationPct"
      | "getEVMScriptExecutor"
      | "getRecoveryVault"
      | "getVoterState"
      | "MODIFY_PARTICIPATION_ROLE"
      | "voteOption"
      | "isParticipationAchieved"
      | "voteOptions"
      | "allowRecoverability"
      | "appId"
      | "getSurvey"
      | "getInitializationBlock"
      | "surveyTime"
      | "initialize"
      | "transferToVault"
      | "canPerform"
      | "getEVMScriptRegistry"
      | "CREATE_SURVEYS_ROLE"
      | "ABSTAIN_VOTE"
      | "getOptionPower"
      | "canVote"
      | "kernel"
      | "isPetrified"
      | "surveysLength"
      | "token"
      | "PCT_BASE"
      | "newSurvey"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeMinAcceptParticipationPct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minParticipationPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterState",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "MODIFY_PARTICIPATION_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteOption",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isParticipationAchieved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOptions",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSurvey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surveyTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_SURVEYS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ABSTAIN_VOTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionPower",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surveysLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "PCT_BASE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newSurvey",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeMinAcceptParticipationPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minParticipationPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODIFY_PARTICIPATION_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteOption", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isParticipationAchieved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSurvey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "surveyTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_SURVEYS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ABSTAIN_VOTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surveysLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PCT_BASE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newSurvey", data: BytesLike): Result;

  events: {
    "StartSurvey(uint256,address,string)": EventFragment;
    "CastVote(uint256,address,uint256,uint256,uint256)": EventFragment;
    "ResetVote(uint256,address,uint256,uint256,uint256)": EventFragment;
    "ChangeMinParticipation(uint64)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StartSurvey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CastVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeMinParticipation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export interface StartSurveyEventObject {
  surveyId: BigNumber;
  creator: string;
  metadata: string;
}
export type StartSurveyEvent = TypedEvent<
  [BigNumber, string, string],
  StartSurveyEventObject
>;

export type StartSurveyEventFilter = TypedEventFilter<StartSurveyEvent>;

export interface CastVoteEventObject {
  surveyId: BigNumber;
  voter: string;
  option: BigNumber;
  stake: BigNumber;
  optionPower: BigNumber;
}
export type CastVoteEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  CastVoteEventObject
>;

export type CastVoteEventFilter = TypedEventFilter<CastVoteEvent>;

export interface ResetVoteEventObject {
  surveyId: BigNumber;
  voter: string;
  option: BigNumber;
  previousStake: BigNumber;
  optionPower: BigNumber;
}
export type ResetVoteEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  ResetVoteEventObject
>;

export type ResetVoteEventFilter = TypedEventFilter<ResetVoteEvent>;

export interface ChangeMinParticipationEventObject {
  minParticipationPct: BigNumber;
}
export type ChangeMinParticipationEvent = TypedEvent<
  [BigNumber],
  ChangeMinParticipationEventObject
>;

export type ChangeMinParticipationEventFilter =
  TypedEventFilter<ChangeMinParticipationEvent>;

export interface ScriptResultEventObject {
  executor: string;
  script: string;
  input: string;
  returnData: string;
}
export type ScriptResultEvent = TypedEvent<
  [string, string, string, string],
  ScriptResultEventObject
>;

export type ScriptResultEventFilter = TypedEventFilter<ScriptResultEvent>;

export interface RecoverToVaultEventObject {
  vault: string;
  token: string;
  amount: BigNumber;
}
export type RecoverToVaultEvent = TypedEvent<
  [string, string, BigNumber],
  RecoverToVaultEventObject
>;

export type RecoverToVaultEventFilter = TypedEventFilter<RecoverToVaultEvent>;

export interface Survey extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SurveyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeMinAcceptParticipationPct(
      _minParticipationPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    resetVote(
      _surveyId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minParticipationPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    getVoterState(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { options: BigNumber[]; stakes: BigNumber[] }
    >;

    MODIFY_PARTICIPATION_ROLE(overrides?: CallOverrides): Promise<[string]>;

    voteOption(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isParticipationAchieved(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    voteOptions(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    getSurvey(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        open: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        minParticipation: BigNumber;
        votingPower: BigNumber;
        participation: BigNumber;
        options: BigNumber;
      }
    >;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    surveyTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    CREATE_SURVEYS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ABSTAIN_VOTE(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOptionPower(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canVote(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    surveysLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    PCT_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    newSurvey(
      _metadata: string,
      _options: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changeMinAcceptParticipationPct(
    _minParticipationPct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  resetVote(
    _surveyId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minParticipationPct(overrides?: CallOverrides): Promise<BigNumber>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  getVoterState(
    _surveyId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & { options: BigNumber[]; stakes: BigNumber[] }
  >;

  MODIFY_PARTICIPATION_ROLE(overrides?: CallOverrides): Promise<string>;

  voteOption(
    _surveyId: BigNumberish,
    _optionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isParticipationAchieved(
    _surveyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  voteOptions(
    _surveyId: BigNumberish,
    _optionIds: BigNumberish[],
    _stakes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  getSurvey(
    _surveyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      open: boolean;
      startDate: BigNumber;
      snapshotBlock: BigNumber;
      minParticipation: BigNumber;
      votingPower: BigNumber;
      participation: BigNumber;
      options: BigNumber;
    }
  >;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  surveyTime(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _token: string,
    _minParticipationPct: BigNumberish,
    _surveyTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  CREATE_SURVEYS_ROLE(overrides?: CallOverrides): Promise<string>;

  ABSTAIN_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

  getOptionPower(
    _surveyId: BigNumberish,
    _optionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canVote(
    _surveyId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  surveysLength(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  newSurvey(
    _metadata: string,
    _options: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeMinAcceptParticipationPct(
      _minParticipationPct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    resetVote(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minParticipationPct(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    getVoterState(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & { options: BigNumber[]; stakes: BigNumber[] }
    >;

    MODIFY_PARTICIPATION_ROLE(overrides?: CallOverrides): Promise<string>;

    voteOption(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isParticipationAchieved(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voteOptions(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    getSurvey(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        open: boolean;
        startDate: BigNumber;
        snapshotBlock: BigNumber;
        minParticipation: BigNumber;
        votingPower: BigNumber;
        participation: BigNumber;
        options: BigNumber;
      }
    >;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    surveyTime(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    CREATE_SURVEYS_ROLE(overrides?: CallOverrides): Promise<string>;

    ABSTAIN_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

    getOptionPower(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canVote(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    surveysLength(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    newSurvey(
      _metadata: string,
      _options: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "StartSurvey(uint256,address,string)"(
      surveyId?: BigNumberish | null,
      creator?: string | null,
      metadata?: null
    ): StartSurveyEventFilter;
    StartSurvey(
      surveyId?: BigNumberish | null,
      creator?: string | null,
      metadata?: null
    ): StartSurveyEventFilter;

    "CastVote(uint256,address,uint256,uint256,uint256)"(
      surveyId?: BigNumberish | null,
      voter?: string | null,
      option?: null,
      stake?: null,
      optionPower?: null
    ): CastVoteEventFilter;
    CastVote(
      surveyId?: BigNumberish | null,
      voter?: string | null,
      option?: null,
      stake?: null,
      optionPower?: null
    ): CastVoteEventFilter;

    "ResetVote(uint256,address,uint256,uint256,uint256)"(
      surveyId?: BigNumberish | null,
      voter?: string | null,
      option?: null,
      previousStake?: null,
      optionPower?: null
    ): ResetVoteEventFilter;
    ResetVote(
      surveyId?: BigNumberish | null,
      voter?: string | null,
      option?: null,
      previousStake?: null,
      optionPower?: null
    ): ResetVoteEventFilter;

    "ChangeMinParticipation(uint64)"(
      minParticipationPct?: null
    ): ChangeMinParticipationEventFilter;
    ChangeMinParticipation(
      minParticipationPct?: null
    ): ChangeMinParticipationEventFilter;

    "ScriptResult(address,bytes,bytes,bytes)"(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;
    ScriptResult(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;

    "RecoverToVault(address,address,uint256)"(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
  };

  estimateGas: {
    changeMinAcceptParticipationPct(
      _minParticipationPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    resetVote(
      _surveyId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minParticipationPct(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    getVoterState(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MODIFY_PARTICIPATION_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    voteOption(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isParticipationAchieved(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteOptions(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    getSurvey(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    surveyTime(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_SURVEYS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ABSTAIN_VOTE(overrides?: CallOverrides): Promise<BigNumber>;

    getOptionPower(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canVote(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    surveysLength(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    PCT_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    newSurvey(
      _metadata: string,
      _options: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeMinAcceptParticipationPct(
      _minParticipationPct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resetVote(
      _surveyId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minParticipationPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoterState(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MODIFY_PARTICIPATION_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteOption(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isParticipationAchieved(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteOptions(
      _surveyId: BigNumberish,
      _optionIds: BigNumberish[],
      _stakes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSurvey(
      _surveyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    surveyTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _minParticipationPct: BigNumberish,
      _surveyTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_SURVEYS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ABSTAIN_VOTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOptionPower(
      _surveyId: BigNumberish,
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canVote(
      _surveyId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    surveysLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PCT_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newSurvey(
      _metadata: string,
      _options: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
