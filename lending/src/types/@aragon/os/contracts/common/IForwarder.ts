/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface IForwarderInterface extends utils.Interface {
  functions: {
    "canForward(address,bytes)": FunctionFragment;
    "forward(bytes)": FunctionFragment;
    "isForwarder()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "canForward" | "forward" | "isForwarder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canForward",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "forward", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isForwarder",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "canForward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isForwarder",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IForwarder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IForwarderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canForward(
      sender: string,
      evmCallScript: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    forward(
      evmCallScript: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isForwarder(overrides?: CallOverrides): Promise<[boolean]>;
  };

  canForward(
    sender: string,
    evmCallScript: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  forward(
    evmCallScript: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isForwarder(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    canForward(
      sender: string,
      evmCallScript: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    forward(evmCallScript: BytesLike, overrides?: CallOverrides): Promise<void>;

    isForwarder(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    canForward(
      sender: string,
      evmCallScript: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forward(
      evmCallScript: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isForwarder(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    canForward(
      sender: string,
      evmCallScript: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forward(
      evmCallScript: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
