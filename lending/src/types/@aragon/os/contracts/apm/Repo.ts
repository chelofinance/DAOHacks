/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface RepoInterface extends utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "getBySemanticVersion(uint16[3])": FunctionFragment;
    "newVersion(uint16[3],address,bytes)": FunctionFragment;
    "getByVersionId(uint256)": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "initialize()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "getLatestForContractAddress(address)": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "isValidBump(uint16[3],uint16[3])": FunctionFragment;
    "CREATE_VERSION_ROLE()": FunctionFragment;
    "getLatest()": FunctionFragment;
    "getVersionsCount()": FunctionFragment;
    "kernel()": FunctionFragment;
    "isPetrified()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "hasInitialized"
      | "getEVMScriptExecutor"
      | "getRecoveryVault"
      | "getBySemanticVersion"
      | "newVersion"
      | "getByVersionId"
      | "allowRecoverability"
      | "appId"
      | "initialize"
      | "getInitializationBlock"
      | "getLatestForContractAddress"
      | "transferToVault"
      | "canPerform"
      | "getEVMScriptRegistry"
      | "isValidBump"
      | "CREATE_VERSION_ROLE"
      | "getLatest"
      | "getVersionsCount"
      | "kernel"
      | "isPetrified"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBySemanticVersion",
    values: [[BigNumberish, BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "newVersion",
    values: [[BigNumberish, BigNumberish, BigNumberish], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getByVersionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestForContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidBump",
    values: [
      [BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_VERSION_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getLatest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVersionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBySemanticVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getByVersionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestForContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidBump",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_VERSION_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLatest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVersionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;

  events: {
    "NewVersion(uint256,uint16[3])": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export interface NewVersionEventObject {
  versionId: BigNumber;
  semanticVersion: [number, number, number];
}
export type NewVersionEvent = TypedEvent<
  [BigNumber, [number, number, number]],
  NewVersionEventObject
>;

export type NewVersionEventFilter = TypedEventFilter<NewVersionEvent>;

export interface ScriptResultEventObject {
  executor: string;
  script: string;
  input: string;
  returnData: string;
}
export type ScriptResultEvent = TypedEvent<
  [string, string, string, string],
  ScriptResultEventObject
>;

export type ScriptResultEventFilter = TypedEventFilter<ScriptResultEvent>;

export interface RecoverToVaultEventObject {
  vault: string;
  token: string;
  amount: BigNumber;
}
export type RecoverToVaultEvent = TypedEvent<
  [string, string, BigNumber],
  RecoverToVaultEventObject
>;

export type RecoverToVaultEventFilter = TypedEventFilter<RecoverToVaultEvent>;

export interface Repo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RepoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    getBySemanticVersion(
      _semanticVersion: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    newVersion(
      _newSemanticVersion: [BigNumberish, BigNumberish, BigNumberish],
      _contractAddress: string,
      _contentURI: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getByVersionId(
      _versionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLatestForContractAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    isValidBump(
      _oldVersion: [BigNumberish, BigNumberish, BigNumberish],
      _newVersion: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    CREATE_VERSION_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getLatest(
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    getVersionsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  getBySemanticVersion(
    _semanticVersion: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<
    [[number, number, number], string, string] & {
      semanticVersion: [number, number, number];
      contractAddress: string;
      contentURI: string;
    }
  >;

  newVersion(
    _newSemanticVersion: [BigNumberish, BigNumberish, BigNumberish],
    _contractAddress: string,
    _contentURI: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getByVersionId(
    _versionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[number, number, number], string, string] & {
      semanticVersion: [number, number, number];
      contractAddress: string;
      contentURI: string;
    }
  >;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getLatestForContractAddress(
    _contractAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [[number, number, number], string, string] & {
      semanticVersion: [number, number, number];
      contractAddress: string;
      contentURI: string;
    }
  >;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  isValidBump(
    _oldVersion: [BigNumberish, BigNumberish, BigNumberish],
    _newVersion: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: CallOverrides
  ): Promise<boolean>;

  CREATE_VERSION_ROLE(overrides?: CallOverrides): Promise<string>;

  getLatest(
    overrides?: CallOverrides
  ): Promise<
    [[number, number, number], string, string] & {
      semanticVersion: [number, number, number];
      contractAddress: string;
      contentURI: string;
    }
  >;

  getVersionsCount(overrides?: CallOverrides): Promise<BigNumber>;

  kernel(overrides?: CallOverrides): Promise<string>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    getBySemanticVersion(
      _semanticVersion: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    newVersion(
      _newSemanticVersion: [BigNumberish, BigNumberish, BigNumberish],
      _contractAddress: string,
      _contentURI: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getByVersionId(
      _versionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestForContractAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    isValidBump(
      _oldVersion: [BigNumberish, BigNumberish, BigNumberish],
      _newVersion: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<boolean>;

    CREATE_VERSION_ROLE(overrides?: CallOverrides): Promise<string>;

    getLatest(
      overrides?: CallOverrides
    ): Promise<
      [[number, number, number], string, string] & {
        semanticVersion: [number, number, number];
        contractAddress: string;
        contentURI: string;
      }
    >;

    getVersionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<string>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "NewVersion(uint256,uint16[3])"(
      versionId?: null,
      semanticVersion?: null
    ): NewVersionEventFilter;
    NewVersion(versionId?: null, semanticVersion?: null): NewVersionEventFilter;

    "ScriptResult(address,bytes,bytes,bytes)"(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;
    ScriptResult(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;

    "RecoverToVault(address,address,uint256)"(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    getBySemanticVersion(
      _semanticVersion: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newVersion(
      _newSemanticVersion: [BigNumberish, BigNumberish, BigNumberish],
      _contractAddress: string,
      _contentURI: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getByVersionId(
      _versionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestForContractAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    isValidBump(
      _oldVersion: [BigNumberish, BigNumberish, BigNumberish],
      _newVersion: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CREATE_VERSION_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getLatest(overrides?: CallOverrides): Promise<BigNumber>;

    getVersionsCount(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBySemanticVersion(
      _semanticVersion: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newVersion(
      _newSemanticVersion: [BigNumberish, BigNumberish, BigNumberish],
      _contractAddress: string,
      _contentURI: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getByVersionId(
      _versionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestForContractAddress(
      _contractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidBump(
      _oldVersion: [BigNumberish, BigNumberish, BigNumberish],
      _newVersion: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CREATE_VERSION_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVersionsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
