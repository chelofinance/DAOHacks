/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface KernelProxyInterface extends utils.Interface {
  functions: {
    "proxyType()": FunctionFragment;
    "apps(bytes32,bytes32)": FunctionFragment;
    "isDepositable()": FunctionFragment;
    "implementation()": FunctionFragment;
    "recoveryVaultAppId()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "proxyType"
      | "apps"
      | "isDepositable"
      | "implementation"
      | "recoveryVaultAppId"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "proxyType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "apps",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryVaultAppId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "proxyType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "apps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDepositable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryVaultAppId",
    data: BytesLike
  ): Result;

  events: {
    "ProxyDeposit(address,uint256)": EventFragment;
    "SetApp(bytes32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProxyDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApp"): EventFragment;
}

export interface ProxyDepositEventObject {
  sender: string;
  value: BigNumber;
}
export type ProxyDepositEvent = TypedEvent<
  [string, BigNumber],
  ProxyDepositEventObject
>;

export type ProxyDepositEventFilter = TypedEventFilter<ProxyDepositEvent>;

export interface SetAppEventObject {
  namespace: string;
  appId: string;
  app: string;
}
export type SetAppEvent = TypedEvent<
  [string, string, string],
  SetAppEventObject
>;

export type SetAppEventFilter = TypedEventFilter<SetAppEvent>;

export interface KernelProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KernelProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    proxyType(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { proxyTypeId: BigNumber }>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isDepositable(overrides?: CallOverrides): Promise<[boolean]>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    recoveryVaultAppId(overrides?: CallOverrides): Promise<[string]>;
  };

  proxyType(overrides?: CallOverrides): Promise<BigNumber>;

  apps(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isDepositable(overrides?: CallOverrides): Promise<boolean>;

  implementation(overrides?: CallOverrides): Promise<string>;

  recoveryVaultAppId(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    proxyType(overrides?: CallOverrides): Promise<BigNumber>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isDepositable(overrides?: CallOverrides): Promise<boolean>;

    implementation(overrides?: CallOverrides): Promise<string>;

    recoveryVaultAppId(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ProxyDeposit(address,uint256)"(
      sender?: null,
      value?: null
    ): ProxyDepositEventFilter;
    ProxyDeposit(sender?: null, value?: null): ProxyDepositEventFilter;

    "SetApp(bytes32,bytes32,address)"(
      namespace?: BytesLike | null,
      appId?: BytesLike | null,
      app?: null
    ): SetAppEventFilter;
    SetApp(
      namespace?: BytesLike | null,
      appId?: BytesLike | null,
      app?: null
    ): SetAppEventFilter;
  };

  estimateGas: {
    proxyType(overrides?: CallOverrides): Promise<BigNumber>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDepositable(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    recoveryVaultAppId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    proxyType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDepositable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoveryVaultAppId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
