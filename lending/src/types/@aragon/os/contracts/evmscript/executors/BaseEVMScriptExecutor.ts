/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface BaseEVMScriptExecutorInterface extends utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "execScript(bytes,bytes,address[])": FunctionFragment;
    "executorType()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "isPetrified()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "hasInitialized"
      | "execScript"
      | "executorType"
      | "getInitializationBlock"
      | "isPetrified"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execScript",
    values: [BytesLike, BytesLike, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executorType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execScript", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executorType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BaseEVMScriptExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BaseEVMScriptExecutorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    execScript(
      script: BytesLike,
      input: BytesLike,
      blacklist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executorType(overrides?: CallOverrides): Promise<[string]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  execScript(
    script: BytesLike,
    input: BytesLike,
    blacklist: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executorType(overrides?: CallOverrides): Promise<string>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    execScript(
      script: BytesLike,
      input: BytesLike,
      blacklist: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    executorType(overrides?: CallOverrides): Promise<string>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    execScript(
      script: BytesLike,
      input: BytesLike,
      blacklist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executorType(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execScript(
      script: BytesLike,
      input: BytesLike,
      blacklist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executorType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
