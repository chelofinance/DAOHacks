/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface FinanceInterface extends utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "CREATE_PAYMENTS_ROLE()": FunctionFragment;
    "newScheduledPayment(address,address,uint256,uint64,uint64,uint64,string)": FunctionFragment;
    "executePayment(uint256)": FunctionFragment;
    "initialize(address,uint64)": FunctionFragment;
    "removeBudget(address)": FunctionFragment;
    "getBudget(address)": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "setPaymentStatus(uint256,bool)": FunctionFragment;
    "getPayment(uint256)": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "getTransaction(uint256)": FunctionFragment;
    "CHANGE_PERIOD_ROLE()": FunctionFragment;
    "CHANGE_BUDGETS_ROLE()": FunctionFragment;
    "receiverExecutePayment(uint256)": FunctionFragment;
    "getPeriod(uint64)": FunctionFragment;
    "setPeriodDuration(uint64)": FunctionFragment;
    "periodsLength()": FunctionFragment;
    "setBudget(address,uint256)": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "recoverToVault(address)": FunctionFragment;
    "EXECUTE_PAYMENTS_ROLE()": FunctionFragment;
    "currentPeriodId()": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "tryTransitionAccountingPeriod(uint64)": FunctionFragment;
    "getPeriodDuration()": FunctionFragment;
    "deposit(address,uint256,string)": FunctionFragment;
    "nextPaymentTime(uint256)": FunctionFragment;
    "getPeriodTokenStatement(uint64,address)": FunctionFragment;
    "kernel()": FunctionFragment;
    "paymentsNextIndex()": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "canMakePayment(address,uint256)": FunctionFragment;
    "MANAGE_PAYMENTS_ROLE()": FunctionFragment;
    "transactionsNextIndex()": FunctionFragment;
    "getRemainingBudget(address)": FunctionFragment;
    "newImmediatePayment(address,address,uint256,string)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "hasInitialized"
      | "CREATE_PAYMENTS_ROLE"
      | "newScheduledPayment"
      | "executePayment"
      | "initialize"
      | "removeBudget"
      | "getBudget"
      | "getEVMScriptExecutor"
      | "setPaymentStatus"
      | "getPayment"
      | "getRecoveryVault"
      | "getTransaction"
      | "CHANGE_PERIOD_ROLE"
      | "CHANGE_BUDGETS_ROLE"
      | "receiverExecutePayment"
      | "getPeriod"
      | "setPeriodDuration"
      | "periodsLength"
      | "setBudget"
      | "allowRecoverability"
      | "appId"
      | "getInitializationBlock"
      | "recoverToVault"
      | "EXECUTE_PAYMENTS_ROLE"
      | "currentPeriodId"
      | "transferToVault"
      | "canPerform"
      | "getEVMScriptRegistry"
      | "tryTransitionAccountingPeriod"
      | "getPeriodDuration"
      | "deposit"
      | "nextPaymentTime"
      | "getPeriodTokenStatement"
      | "kernel"
      | "paymentsNextIndex"
      | "isPetrified"
      | "canMakePayment"
      | "MANAGE_PAYMENTS_ROLE"
      | "transactionsNextIndex"
      | "getRemainingBudget"
      | "newImmediatePayment"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_PAYMENTS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newScheduledPayment",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executePayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBudget",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getBudget", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentStatus",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "CHANGE_PERIOD_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHANGE_BUDGETS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiverExecutePayment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriodDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "periodsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBudget",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "EXECUTE_PAYMENTS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPeriodId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tryTransitionAccountingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPaymentTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodTokenStatement",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentsNextIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canMakePayment",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGE_PAYMENTS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionsNextIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingBudget",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "newImmediatePayment",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_PAYMENTS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newScheduledPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBudget", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHANGE_PERIOD_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHANGE_BUDGETS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiverExecutePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBudget", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXECUTE_PAYMENTS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPeriodId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryTransitionAccountingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextPaymentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodTokenStatement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentsNextIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canMakePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGE_PAYMENTS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionsNextIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingBudget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newImmediatePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "NewPeriod(uint64,uint64,uint64)": EventFragment;
    "SetBudget(address,uint256,bool)": EventFragment;
    "NewPayment(uint256,address,uint64,string)": EventFragment;
    "NewTransaction(uint256,bool,address,uint256,string)": EventFragment;
    "ChangePaymentState(uint256,bool)": EventFragment;
    "ChangePeriodDuration(uint64)": EventFragment;
    "PaymentFailure(uint256)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBudget"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePaymentState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePeriodDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export interface NewPeriodEventObject {
  periodId: BigNumber;
  periodStarts: BigNumber;
  periodEnds: BigNumber;
}
export type NewPeriodEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  NewPeriodEventObject
>;

export type NewPeriodEventFilter = TypedEventFilter<NewPeriodEvent>;

export interface SetBudgetEventObject {
  token: string;
  amount: BigNumber;
  hasBudget: boolean;
}
export type SetBudgetEvent = TypedEvent<
  [string, BigNumber, boolean],
  SetBudgetEventObject
>;

export type SetBudgetEventFilter = TypedEventFilter<SetBudgetEvent>;

export interface NewPaymentEventObject {
  paymentId: BigNumber;
  recipient: string;
  maxExecutions: BigNumber;
  reference: string;
}
export type NewPaymentEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  NewPaymentEventObject
>;

export type NewPaymentEventFilter = TypedEventFilter<NewPaymentEvent>;

export interface NewTransactionEventObject {
  transactionId: BigNumber;
  incoming: boolean;
  entity: string;
  amount: BigNumber;
  reference: string;
}
export type NewTransactionEvent = TypedEvent<
  [BigNumber, boolean, string, BigNumber, string],
  NewTransactionEventObject
>;

export type NewTransactionEventFilter = TypedEventFilter<NewTransactionEvent>;

export interface ChangePaymentStateEventObject {
  paymentId: BigNumber;
  active: boolean;
}
export type ChangePaymentStateEvent = TypedEvent<
  [BigNumber, boolean],
  ChangePaymentStateEventObject
>;

export type ChangePaymentStateEventFilter =
  TypedEventFilter<ChangePaymentStateEvent>;

export interface ChangePeriodDurationEventObject {
  newDuration: BigNumber;
}
export type ChangePeriodDurationEvent = TypedEvent<
  [BigNumber],
  ChangePeriodDurationEventObject
>;

export type ChangePeriodDurationEventFilter =
  TypedEventFilter<ChangePeriodDurationEvent>;

export interface PaymentFailureEventObject {
  paymentId: BigNumber;
}
export type PaymentFailureEvent = TypedEvent<
  [BigNumber],
  PaymentFailureEventObject
>;

export type PaymentFailureEventFilter = TypedEventFilter<PaymentFailureEvent>;

export interface ScriptResultEventObject {
  executor: string;
  script: string;
  input: string;
  returnData: string;
}
export type ScriptResultEvent = TypedEvent<
  [string, string, string, string],
  ScriptResultEventObject
>;

export type ScriptResultEventFilter = TypedEventFilter<ScriptResultEvent>;

export interface RecoverToVaultEventObject {
  vault: string;
  token: string;
  amount: BigNumber;
}
export type RecoverToVaultEvent = TypedEvent<
  [string, string, BigNumber],
  RecoverToVaultEventObject
>;

export type RecoverToVaultEventFilter = TypedEventFilter<RecoverToVaultEvent>;

export interface Finance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FinanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    CREATE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    newScheduledPayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeBudget(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { budget: BigNumber; hasBudget: boolean }
    >;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setPaymentStatus(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string
      ] & {
        token: string;
        receiver: string;
        amount: BigNumber;
        initialPaymentTime: BigNumber;
        interval: BigNumber;
        maxExecutions: BigNumber;
        inactive: boolean;
        executions: BigNumber;
        createdBy: string;
      }
    >;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    getTransaction(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber
      ] & {
        periodId: BigNumber;
        amount: BigNumber;
        paymentId: BigNumber;
        paymentExecutionNumber: BigNumber;
        token: string;
        entity: string;
        isIncoming: boolean;
        date: BigNumber;
      }
    >;

    CHANGE_PERIOD_ROLE(overrides?: CallOverrides): Promise<[string]>;

    CHANGE_BUDGETS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    receiverExecutePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isCurrent: boolean;
        startTime: BigNumber;
        endTime: BigNumber;
        firstTransactionId: BigNumber;
        lastTransactionId: BigNumber;
      }
    >;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    periodsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBudget(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowRecoverability(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    EXECUTE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    currentPeriodId(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    tryTransitionAccountingPeriod(
      _maxTransitions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPeriodDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextPaymentTime(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodTokenStatement(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { expenses: BigNumber; income: BigNumber }
    >;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    paymentsNextIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    canMakePayment(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    MANAGE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    transactionsNextIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRemainingBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newImmediatePayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  CREATE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

  newScheduledPayment(
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    _initialPaymentTime: BigNumberish,
    _interval: BigNumberish,
    _maxExecutions: BigNumberish,
    _reference: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executePayment(
    _paymentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _vault: string,
    _periodDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeBudget(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBudget(
    _token: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { budget: BigNumber; hasBudget: boolean }>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  setPaymentStatus(
    _paymentId: BigNumberish,
    _active: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPayment(
    _paymentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber,
      string
    ] & {
      token: string;
      receiver: string;
      amount: BigNumber;
      initialPaymentTime: BigNumber;
      interval: BigNumber;
      maxExecutions: BigNumber;
      inactive: boolean;
      executions: BigNumber;
      createdBy: string;
    }
  >;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  getTransaction(
    _transactionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      BigNumber
    ] & {
      periodId: BigNumber;
      amount: BigNumber;
      paymentId: BigNumber;
      paymentExecutionNumber: BigNumber;
      token: string;
      entity: string;
      isIncoming: boolean;
      date: BigNumber;
    }
  >;

  CHANGE_PERIOD_ROLE(overrides?: CallOverrides): Promise<string>;

  CHANGE_BUDGETS_ROLE(overrides?: CallOverrides): Promise<string>;

  receiverExecutePayment(
    _paymentId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPeriod(
    _periodId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      isCurrent: boolean;
      startTime: BigNumber;
      endTime: BigNumber;
      firstTransactionId: BigNumber;
      lastTransactionId: BigNumber;
    }
  >;

  setPeriodDuration(
    _periodDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  periodsLength(overrides?: CallOverrides): Promise<BigNumber>;

  setBudget(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowRecoverability(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  recoverToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  EXECUTE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

  currentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  tryTransitionAccountingPeriod(
    _maxTransitions: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _token: string,
    _amount: BigNumberish,
    _reference: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextPaymentTime(
    _paymentId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodTokenStatement(
    _periodId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { expenses: BigNumber; income: BigNumber }
  >;

  kernel(overrides?: CallOverrides): Promise<string>;

  paymentsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  canMakePayment(
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  MANAGE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

  transactionsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getRemainingBudget(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newImmediatePayment(
    _token: string,
    _receiver: string,
    _amount: BigNumberish,
    _reference: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    CREATE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

    newScheduledPayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executePayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBudget(_token: string, overrides?: CallOverrides): Promise<void>;

    getBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { budget: BigNumber; hasBudget: boolean }
    >;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setPaymentStatus(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getPayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber,
        string
      ] & {
        token: string;
        receiver: string;
        amount: BigNumber;
        initialPaymentTime: BigNumber;
        interval: BigNumber;
        maxExecutions: BigNumber;
        inactive: boolean;
        executions: BigNumber;
        createdBy: string;
      }
    >;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    getTransaction(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        BigNumber
      ] & {
        periodId: BigNumber;
        amount: BigNumber;
        paymentId: BigNumber;
        paymentExecutionNumber: BigNumber;
        token: string;
        entity: string;
        isIncoming: boolean;
        date: BigNumber;
      }
    >;

    CHANGE_PERIOD_ROLE(overrides?: CallOverrides): Promise<string>;

    CHANGE_BUDGETS_ROLE(overrides?: CallOverrides): Promise<string>;

    receiverExecutePayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isCurrent: boolean;
        startTime: BigNumber;
        endTime: BigNumber;
        firstTransactionId: BigNumber;
        lastTransactionId: BigNumber;
      }
    >;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    periodsLength(overrides?: CallOverrides): Promise<BigNumber>;

    setBudget(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowRecoverability(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    recoverToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    EXECUTE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

    currentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    tryTransitionAccountingPeriod(
      _maxTransitions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nextPaymentTime(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodTokenStatement(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { expenses: BigNumber; income: BigNumber }
    >;

    kernel(overrides?: CallOverrides): Promise<string>;

    paymentsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    canMakePayment(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    MANAGE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<string>;

    transactionsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newImmediatePayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NewPeriod(uint64,uint64,uint64)"(
      periodId?: BigNumberish | null,
      periodStarts?: null,
      periodEnds?: null
    ): NewPeriodEventFilter;
    NewPeriod(
      periodId?: BigNumberish | null,
      periodStarts?: null,
      periodEnds?: null
    ): NewPeriodEventFilter;

    "SetBudget(address,uint256,bool)"(
      token?: string | null,
      amount?: null,
      hasBudget?: null
    ): SetBudgetEventFilter;
    SetBudget(
      token?: string | null,
      amount?: null,
      hasBudget?: null
    ): SetBudgetEventFilter;

    "NewPayment(uint256,address,uint64,string)"(
      paymentId?: BigNumberish | null,
      recipient?: string | null,
      maxExecutions?: null,
      reference?: null
    ): NewPaymentEventFilter;
    NewPayment(
      paymentId?: BigNumberish | null,
      recipient?: string | null,
      maxExecutions?: null,
      reference?: null
    ): NewPaymentEventFilter;

    "NewTransaction(uint256,bool,address,uint256,string)"(
      transactionId?: BigNumberish | null,
      incoming?: null,
      entity?: string | null,
      amount?: null,
      reference?: null
    ): NewTransactionEventFilter;
    NewTransaction(
      transactionId?: BigNumberish | null,
      incoming?: null,
      entity?: string | null,
      amount?: null,
      reference?: null
    ): NewTransactionEventFilter;

    "ChangePaymentState(uint256,bool)"(
      paymentId?: BigNumberish | null,
      active?: null
    ): ChangePaymentStateEventFilter;
    ChangePaymentState(
      paymentId?: BigNumberish | null,
      active?: null
    ): ChangePaymentStateEventFilter;

    "ChangePeriodDuration(uint64)"(
      newDuration?: null
    ): ChangePeriodDurationEventFilter;
    ChangePeriodDuration(newDuration?: null): ChangePeriodDurationEventFilter;

    "PaymentFailure(uint256)"(paymentId?: null): PaymentFailureEventFilter;
    PaymentFailure(paymentId?: null): PaymentFailureEventFilter;

    "ScriptResult(address,bytes,bytes,bytes)"(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;
    ScriptResult(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;

    "RecoverToVault(address,address,uint256)"(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    newScheduledPayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeBudget(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBudget(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPaymentStatus(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    getTransaction(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CHANGE_PERIOD_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    CHANGE_BUDGETS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    receiverExecutePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    periodsLength(overrides?: CallOverrides): Promise<BigNumber>;

    setBudget(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowRecoverability(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    recoverToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    EXECUTE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    currentPeriodId(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    tryTransitionAccountingPeriod(
      _maxTransitions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPeriodDuration(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextPaymentTime(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodTokenStatement(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    paymentsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    canMakePayment(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MANAGE_PAYMENTS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    transactionsNextIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newImmediatePayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CREATE_PAYMENTS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newScheduledPayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _initialPaymentTime: BigNumberish,
      _interval: BigNumberish,
      _maxExecutions: BigNumberish,
      _reference: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _vault: string,
      _periodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeBudget(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPaymentStatus(
      _paymentId: BigNumberish,
      _active: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPayment(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransaction(
      _transactionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHANGE_PERIOD_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHANGE_BUDGETS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiverExecutePayment(
      _paymentId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPeriod(
      _periodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    periodsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBudget(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    EXECUTE_PAYMENTS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPeriodId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tryTransitionAccountingPeriod(
      _maxTransitions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPeriodDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextPaymentTime(
      _paymentId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodTokenStatement(
      _periodId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentsNextIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canMakePayment(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGE_PAYMENTS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionsNextIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingBudget(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newImmediatePayment(
      _token: string,
      _receiver: string,
      _amount: BigNumberish,
      _reference: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
