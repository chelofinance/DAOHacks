/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface PayrollInterface extends utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "setEmployeeSalary(uint256,uint256)": FunctionFragment;
    "changeAddressByEmployee(address)": FunctionFragment;
    "MANAGE_ALLOWED_TOKENS_ROLE()": FunctionFragment;
    "nextEmployee()": FunctionFragment;
    "terminateEmployee(uint256,uint64)": FunctionFragment;
    "getAllocation(uint256,address)": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "MODIFY_RATE_EXPIRY_ROLE()": FunctionFragment;
    "finance()": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "ADD_BONUS_ROLE()": FunctionFragment;
    "feed()": FunctionFragment;
    "initialize(address,address,address,uint64)": FunctionFragment;
    "SET_EMPLOYEE_SALARY_ROLE()": FunctionFragment;
    "setRateExpiryTime(uint64)": FunctionFragment;
    "MODIFY_PRICE_FEED_ROLE()": FunctionFragment;
    "TERMINATE_EMPLOYEE_ROLE()": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "ADD_REIMBURSEMENT_ROLE()": FunctionFragment;
    "setAllowedToken(address,bool)": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "getTotalOwedSalary(uint256)": FunctionFragment;
    "addBonus(uint256,uint256)": FunctionFragment;
    "addReimbursement(uint256,uint256)": FunctionFragment;
    "getEmployee(uint256)": FunctionFragment;
    "rateExpiryTime()": FunctionFragment;
    "ADD_EMPLOYEE_ROLE()": FunctionFragment;
    "canForward(address,bytes)": FunctionFragment;
    "kernel()": FunctionFragment;
    "forward(bytes)": FunctionFragment;
    "payday(uint8,uint256,uint256[])": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "addEmployee(address,uint256,uint64,string)": FunctionFragment;
    "denominationToken()": FunctionFragment;
    "isTokenAllowed(address)": FunctionFragment;
    "isForwarder()": FunctionFragment;
    "determineAllocation(address[],uint256[])": FunctionFragment;
    "getEmployeeIdByAddress(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "hasInitialized"
      | "setEmployeeSalary"
      | "changeAddressByEmployee"
      | "MANAGE_ALLOWED_TOKENS_ROLE"
      | "nextEmployee"
      | "terminateEmployee"
      | "getAllocation"
      | "getEVMScriptExecutor"
      | "MODIFY_RATE_EXPIRY_ROLE"
      | "finance"
      | "getRecoveryVault"
      | "ADD_BONUS_ROLE"
      | "feed"
      | "initialize"
      | "SET_EMPLOYEE_SALARY_ROLE"
      | "setRateExpiryTime"
      | "MODIFY_PRICE_FEED_ROLE"
      | "TERMINATE_EMPLOYEE_ROLE"
      | "setPriceFeed"
      | "allowRecoverability"
      | "appId"
      | "ADD_REIMBURSEMENT_ROLE"
      | "setAllowedToken"
      | "getInitializationBlock"
      | "transferToVault"
      | "canPerform"
      | "getEVMScriptRegistry"
      | "getTotalOwedSalary"
      | "addBonus"
      | "addReimbursement"
      | "getEmployee"
      | "rateExpiryTime"
      | "ADD_EMPLOYEE_ROLE"
      | "canForward"
      | "kernel"
      | "forward"
      | "payday"
      | "isPetrified"
      | "addEmployee"
      | "denominationToken"
      | "isTokenAllowed"
      | "isForwarder"
      | "determineAllocation"
      | "getEmployeeIdByAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmployeeSalary",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAddressByEmployee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGE_ALLOWED_TOKENS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextEmployee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "terminateEmployee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocation",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "MODIFY_RATE_EXPIRY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADD_BONUS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SET_EMPLOYEE_SALARY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRateExpiryTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MODIFY_PRICE_FEED_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TERMINATE_EMPLOYEE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ADD_REIMBURSEMENT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOwedSalary",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addBonus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addReimbursement",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rateExpiryTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADD_EMPLOYEE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canForward",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(functionFragment: "forward", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "payday",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "denominationToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAllowed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "determineAllocation",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeIdByAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmployeeSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAddressByEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGE_ALLOWED_TOKENS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "terminateEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODIFY_RATE_EXPIRY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADD_BONUS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SET_EMPLOYEE_SALARY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRateExpiryTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODIFY_PRICE_FEED_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TERMINATE_EMPLOYEE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ADD_REIMBURSEMENT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOwedSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addReimbursement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateExpiryTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADD_EMPLOYEE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canForward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payday", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "denominationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "determineAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeIdByAddress",
    data: BytesLike
  ): Result;

  events: {
    "AddEmployee(uint256,address,uint256,uint64,string)": EventFragment;
    "TerminateEmployee(uint256,uint64)": EventFragment;
    "SetEmployeeSalary(uint256,uint256)": EventFragment;
    "AddEmployeeAccruedSalary(uint256,uint256)": EventFragment;
    "AddEmployeeBonus(uint256,uint256)": EventFragment;
    "AddEmployeeReimbursement(uint256,uint256)": EventFragment;
    "ChangeAddressByEmployee(uint256,address,address)": EventFragment;
    "DetermineAllocation(uint256)": EventFragment;
    "SendPayment(uint256,address,address,uint256,uint256,string)": EventFragment;
    "SetAllowedToken(address,bool)": EventFragment;
    "SetPriceFeed(address)": EventFragment;
    "SetRateExpiryTime(uint64)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddEmployee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TerminateEmployee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEmployeeSalary"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddEmployeeAccruedSalary"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddEmployeeBonus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddEmployeeReimbursement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeAddressByEmployee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DetermineAllocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAllowedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPriceFeed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRateExpiryTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export interface AddEmployeeEventObject {
  employeeId: BigNumber;
  accountAddress: string;
  initialDenominationSalary: BigNumber;
  startDate: BigNumber;
  role: string;
}
export type AddEmployeeEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string],
  AddEmployeeEventObject
>;

export type AddEmployeeEventFilter = TypedEventFilter<AddEmployeeEvent>;

export interface TerminateEmployeeEventObject {
  employeeId: BigNumber;
  endDate: BigNumber;
}
export type TerminateEmployeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  TerminateEmployeeEventObject
>;

export type TerminateEmployeeEventFilter =
  TypedEventFilter<TerminateEmployeeEvent>;

export interface SetEmployeeSalaryEventObject {
  employeeId: BigNumber;
  denominationSalary: BigNumber;
}
export type SetEmployeeSalaryEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetEmployeeSalaryEventObject
>;

export type SetEmployeeSalaryEventFilter =
  TypedEventFilter<SetEmployeeSalaryEvent>;

export interface AddEmployeeAccruedSalaryEventObject {
  employeeId: BigNumber;
  amount: BigNumber;
}
export type AddEmployeeAccruedSalaryEvent = TypedEvent<
  [BigNumber, BigNumber],
  AddEmployeeAccruedSalaryEventObject
>;

export type AddEmployeeAccruedSalaryEventFilter =
  TypedEventFilter<AddEmployeeAccruedSalaryEvent>;

export interface AddEmployeeBonusEventObject {
  employeeId: BigNumber;
  amount: BigNumber;
}
export type AddEmployeeBonusEvent = TypedEvent<
  [BigNumber, BigNumber],
  AddEmployeeBonusEventObject
>;

export type AddEmployeeBonusEventFilter =
  TypedEventFilter<AddEmployeeBonusEvent>;

export interface AddEmployeeReimbursementEventObject {
  employeeId: BigNumber;
  amount: BigNumber;
}
export type AddEmployeeReimbursementEvent = TypedEvent<
  [BigNumber, BigNumber],
  AddEmployeeReimbursementEventObject
>;

export type AddEmployeeReimbursementEventFilter =
  TypedEventFilter<AddEmployeeReimbursementEvent>;

export interface ChangeAddressByEmployeeEventObject {
  employeeId: BigNumber;
  newAccountAddress: string;
  oldAccountAddress: string;
}
export type ChangeAddressByEmployeeEvent = TypedEvent<
  [BigNumber, string, string],
  ChangeAddressByEmployeeEventObject
>;

export type ChangeAddressByEmployeeEventFilter =
  TypedEventFilter<ChangeAddressByEmployeeEvent>;

export interface DetermineAllocationEventObject {
  employeeId: BigNumber;
}
export type DetermineAllocationEvent = TypedEvent<
  [BigNumber],
  DetermineAllocationEventObject
>;

export type DetermineAllocationEventFilter =
  TypedEventFilter<DetermineAllocationEvent>;

export interface SendPaymentEventObject {
  employeeId: BigNumber;
  accountAddress: string;
  token: string;
  amount: BigNumber;
  exchangeRate: BigNumber;
  paymentReference: string;
}
export type SendPaymentEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, string],
  SendPaymentEventObject
>;

export type SendPaymentEventFilter = TypedEventFilter<SendPaymentEvent>;

export interface SetAllowedTokenEventObject {
  token: string;
  allowed: boolean;
}
export type SetAllowedTokenEvent = TypedEvent<
  [string, boolean],
  SetAllowedTokenEventObject
>;

export type SetAllowedTokenEventFilter = TypedEventFilter<SetAllowedTokenEvent>;

export interface SetPriceFeedEventObject {
  feed: string;
}
export type SetPriceFeedEvent = TypedEvent<[string], SetPriceFeedEventObject>;

export type SetPriceFeedEventFilter = TypedEventFilter<SetPriceFeedEvent>;

export interface SetRateExpiryTimeEventObject {
  time: BigNumber;
}
export type SetRateExpiryTimeEvent = TypedEvent<
  [BigNumber],
  SetRateExpiryTimeEventObject
>;

export type SetRateExpiryTimeEventFilter =
  TypedEventFilter<SetRateExpiryTimeEvent>;

export interface ScriptResultEventObject {
  executor: string;
  script: string;
  input: string;
  returnData: string;
}
export type ScriptResultEvent = TypedEvent<
  [string, string, string, string],
  ScriptResultEventObject
>;

export type ScriptResultEventFilter = TypedEventFilter<ScriptResultEvent>;

export interface RecoverToVaultEventObject {
  vault: string;
  token: string;
  amount: BigNumber;
}
export type RecoverToVaultEvent = TypedEvent<
  [string, string, BigNumber],
  RecoverToVaultEventObject
>;

export type RecoverToVaultEventFilter = TypedEventFilter<RecoverToVaultEvent>;

export interface Payroll extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PayrollInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    setEmployeeSalary(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAddressByEmployee(
      _newAccountAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    MANAGE_ALLOWED_TOKENS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    nextEmployee(overrides?: CallOverrides): Promise<[BigNumber]>;

    terminateEmployee(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllocation(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    MODIFY_RATE_EXPIRY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    finance(overrides?: CallOverrides): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    ADD_BONUS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    feed(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    SET_EMPLOYEE_SALARY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    setRateExpiryTime(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    MODIFY_PRICE_FEED_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TERMINATE_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    setPriceFeed(
      _feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    ADD_REIMBURSEMENT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    setAllowedToken(
      _token: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    getTotalOwedSalary(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addBonus(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addReimbursement(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEmployee(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[]
      ] & {
        accountAddress: string;
        denominationSalary: BigNumber;
        accruedSalary: BigNumber;
        bonus: BigNumber;
        reimbursements: BigNumber;
        lastPayroll: BigNumber;
        endDate: BigNumber;
        allocationTokens: string[];
      }
    >;

    rateExpiryTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    ADD_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payday(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    addEmployee(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    denominationToken(overrides?: CallOverrides): Promise<[string]>;

    isTokenAllowed(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isForwarder(overrides?: CallOverrides): Promise<[boolean]>;

    determineAllocation(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getEmployeeIdByAddress(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  setEmployeeSalary(
    _employeeId: BigNumberish,
    _denominationSalary: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAddressByEmployee(
    _newAccountAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  MANAGE_ALLOWED_TOKENS_ROLE(overrides?: CallOverrides): Promise<string>;

  nextEmployee(overrides?: CallOverrides): Promise<BigNumber>;

  terminateEmployee(
    _employeeId: BigNumberish,
    _endDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllocation(
    _employeeId: BigNumberish,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  MODIFY_RATE_EXPIRY_ROLE(overrides?: CallOverrides): Promise<string>;

  finance(overrides?: CallOverrides): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  ADD_BONUS_ROLE(overrides?: CallOverrides): Promise<string>;

  feed(overrides?: CallOverrides): Promise<string>;

  initialize(
    _finance: string,
    _denominationToken: string,
    _priceFeed: string,
    _rateExpiryTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  SET_EMPLOYEE_SALARY_ROLE(overrides?: CallOverrides): Promise<string>;

  setRateExpiryTime(
    _time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  MODIFY_PRICE_FEED_ROLE(overrides?: CallOverrides): Promise<string>;

  TERMINATE_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<string>;

  setPriceFeed(
    _feed: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  ADD_REIMBURSEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

  setAllowedToken(
    _token: string,
    _allowed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  getTotalOwedSalary(
    _employeeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addBonus(
    _employeeId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addReimbursement(
    _employeeId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEmployee(
    _employeeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[]
    ] & {
      accountAddress: string;
      denominationSalary: BigNumber;
      accruedSalary: BigNumber;
      bonus: BigNumber;
      reimbursements: BigNumber;
      lastPayroll: BigNumber;
      endDate: BigNumber;
      allocationTokens: string[];
    }
  >;

  rateExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

  ADD_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<string>;

  canForward(
    _sender: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kernel(overrides?: CallOverrides): Promise<string>;

  forward(
    _evmScript: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payday(
    _type: BigNumberish,
    _requestedAmount: BigNumberish,
    _minRates: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  addEmployee(
    _accountAddress: string,
    _initialDenominationSalary: BigNumberish,
    _startDate: BigNumberish,
    _role: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  denominationToken(overrides?: CallOverrides): Promise<string>;

  isTokenAllowed(_token: string, overrides?: CallOverrides): Promise<boolean>;

  isForwarder(overrides?: CallOverrides): Promise<boolean>;

  determineAllocation(
    _tokens: string[],
    _distribution: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getEmployeeIdByAddress(
    _accountAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    setEmployeeSalary(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAddressByEmployee(
      _newAccountAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    MANAGE_ALLOWED_TOKENS_ROLE(overrides?: CallOverrides): Promise<string>;

    nextEmployee(overrides?: CallOverrides): Promise<BigNumber>;

    terminateEmployee(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllocation(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    MODIFY_RATE_EXPIRY_ROLE(overrides?: CallOverrides): Promise<string>;

    finance(overrides?: CallOverrides): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    ADD_BONUS_ROLE(overrides?: CallOverrides): Promise<string>;

    feed(overrides?: CallOverrides): Promise<string>;

    initialize(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    SET_EMPLOYEE_SALARY_ROLE(overrides?: CallOverrides): Promise<string>;

    setRateExpiryTime(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    MODIFY_PRICE_FEED_ROLE(overrides?: CallOverrides): Promise<string>;

    TERMINATE_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<string>;

    setPriceFeed(_feed: string, overrides?: CallOverrides): Promise<void>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    ADD_REIMBURSEMENT_ROLE(overrides?: CallOverrides): Promise<string>;

    setAllowedToken(
      _token: string,
      _allowed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    getTotalOwedSalary(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBonus(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addReimbursement(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getEmployee(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[]
      ] & {
        accountAddress: string;
        denominationSalary: BigNumber;
        accruedSalary: BigNumber;
        bonus: BigNumber;
        reimbursements: BigNumber;
        lastPayroll: BigNumber;
        endDate: BigNumber;
        allocationTokens: string[];
      }
    >;

    rateExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

    ADD_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<string>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kernel(overrides?: CallOverrides): Promise<string>;

    forward(_evmScript: BytesLike, overrides?: CallOverrides): Promise<void>;

    payday(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    addEmployee(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: CallOverrides
    ): Promise<void>;

    denominationToken(overrides?: CallOverrides): Promise<string>;

    isTokenAllowed(_token: string, overrides?: CallOverrides): Promise<boolean>;

    isForwarder(overrides?: CallOverrides): Promise<boolean>;

    determineAllocation(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getEmployeeIdByAddress(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddEmployee(uint256,address,uint256,uint64,string)"(
      employeeId?: BigNumberish | null,
      accountAddress?: string | null,
      initialDenominationSalary?: null,
      startDate?: null,
      role?: null
    ): AddEmployeeEventFilter;
    AddEmployee(
      employeeId?: BigNumberish | null,
      accountAddress?: string | null,
      initialDenominationSalary?: null,
      startDate?: null,
      role?: null
    ): AddEmployeeEventFilter;

    "TerminateEmployee(uint256,uint64)"(
      employeeId?: BigNumberish | null,
      endDate?: null
    ): TerminateEmployeeEventFilter;
    TerminateEmployee(
      employeeId?: BigNumberish | null,
      endDate?: null
    ): TerminateEmployeeEventFilter;

    "SetEmployeeSalary(uint256,uint256)"(
      employeeId?: BigNumberish | null,
      denominationSalary?: null
    ): SetEmployeeSalaryEventFilter;
    SetEmployeeSalary(
      employeeId?: BigNumberish | null,
      denominationSalary?: null
    ): SetEmployeeSalaryEventFilter;

    "AddEmployeeAccruedSalary(uint256,uint256)"(
      employeeId?: BigNumberish | null,
      amount?: null
    ): AddEmployeeAccruedSalaryEventFilter;
    AddEmployeeAccruedSalary(
      employeeId?: BigNumberish | null,
      amount?: null
    ): AddEmployeeAccruedSalaryEventFilter;

    "AddEmployeeBonus(uint256,uint256)"(
      employeeId?: BigNumberish | null,
      amount?: null
    ): AddEmployeeBonusEventFilter;
    AddEmployeeBonus(
      employeeId?: BigNumberish | null,
      amount?: null
    ): AddEmployeeBonusEventFilter;

    "AddEmployeeReimbursement(uint256,uint256)"(
      employeeId?: BigNumberish | null,
      amount?: null
    ): AddEmployeeReimbursementEventFilter;
    AddEmployeeReimbursement(
      employeeId?: BigNumberish | null,
      amount?: null
    ): AddEmployeeReimbursementEventFilter;

    "ChangeAddressByEmployee(uint256,address,address)"(
      employeeId?: BigNumberish | null,
      newAccountAddress?: string | null,
      oldAccountAddress?: string | null
    ): ChangeAddressByEmployeeEventFilter;
    ChangeAddressByEmployee(
      employeeId?: BigNumberish | null,
      newAccountAddress?: string | null,
      oldAccountAddress?: string | null
    ): ChangeAddressByEmployeeEventFilter;

    "DetermineAllocation(uint256)"(
      employeeId?: BigNumberish | null
    ): DetermineAllocationEventFilter;
    DetermineAllocation(
      employeeId?: BigNumberish | null
    ): DetermineAllocationEventFilter;

    "SendPayment(uint256,address,address,uint256,uint256,string)"(
      employeeId?: BigNumberish | null,
      accountAddress?: string | null,
      token?: string | null,
      amount?: null,
      exchangeRate?: null,
      paymentReference?: null
    ): SendPaymentEventFilter;
    SendPayment(
      employeeId?: BigNumberish | null,
      accountAddress?: string | null,
      token?: string | null,
      amount?: null,
      exchangeRate?: null,
      paymentReference?: null
    ): SendPaymentEventFilter;

    "SetAllowedToken(address,bool)"(
      token?: string | null,
      allowed?: null
    ): SetAllowedTokenEventFilter;
    SetAllowedToken(
      token?: string | null,
      allowed?: null
    ): SetAllowedTokenEventFilter;

    "SetPriceFeed(address)"(feed?: string | null): SetPriceFeedEventFilter;
    SetPriceFeed(feed?: string | null): SetPriceFeedEventFilter;

    "SetRateExpiryTime(uint64)"(time?: null): SetRateExpiryTimeEventFilter;
    SetRateExpiryTime(time?: null): SetRateExpiryTimeEventFilter;

    "ScriptResult(address,bytes,bytes,bytes)"(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;
    ScriptResult(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): ScriptResultEventFilter;

    "RecoverToVault(address,address,uint256)"(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    setEmployeeSalary(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAddressByEmployee(
      _newAccountAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    MANAGE_ALLOWED_TOKENS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    nextEmployee(overrides?: CallOverrides): Promise<BigNumber>;

    terminateEmployee(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllocation(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MODIFY_RATE_EXPIRY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    finance(overrides?: CallOverrides): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    ADD_BONUS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    feed(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    SET_EMPLOYEE_SALARY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    setRateExpiryTime(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    MODIFY_PRICE_FEED_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TERMINATE_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    setPriceFeed(
      _feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    ADD_REIMBURSEMENT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    setAllowedToken(
      _token: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalOwedSalary(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addBonus(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addReimbursement(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEmployee(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateExpiryTime(overrides?: CallOverrides): Promise<BigNumber>;

    ADD_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payday(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    addEmployee(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    denominationToken(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenAllowed(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    determineAllocation(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getEmployeeIdByAddress(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEmployeeSalary(
      _employeeId: BigNumberish,
      _denominationSalary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAddressByEmployee(
      _newAccountAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    MANAGE_ALLOWED_TOKENS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextEmployee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    terminateEmployee(
      _employeeId: BigNumberish,
      _endDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllocation(
      _employeeId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MODIFY_RATE_EXPIRY_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ADD_BONUS_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _finance: string,
      _denominationToken: string,
      _priceFeed: string,
      _rateExpiryTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    SET_EMPLOYEE_SALARY_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRateExpiryTime(
      _time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    MODIFY_PRICE_FEED_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TERMINATE_EMPLOYEE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _feed: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ADD_REIMBURSEMENT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAllowedToken(
      _token: string,
      _allowed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalOwedSalary(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBonus(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addReimbursement(
      _employeeId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEmployee(
      _employeeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateExpiryTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ADD_EMPLOYEE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canForward(
      _sender: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forward(
      _evmScript: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payday(
      _type: BigNumberish,
      _requestedAmount: BigNumberish,
      _minRates: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addEmployee(
      _accountAddress: string,
      _initialDenominationSalary: BigNumberish,
      _startDate: BigNumberish,
      _role: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    denominationToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTokenAllowed(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    determineAllocation(
      _tokens: string[],
      _distribution: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getEmployeeIdByAddress(
      _accountAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
