/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface IVaultRecoverableInterface extends utils.Interface {
  functions: {
    "getRecoveryVault()": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getRecoveryVault"
      | "allowRecoverability"
      | "transferToVault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;

  events: {
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export interface RecoverToVaultEventObject {
  vault: string;
  token: string;
  amount: BigNumber;
}
export type RecoverToVaultEvent = TypedEvent<
  [string, string, BigNumber],
  RecoverToVaultEventObject
>;

export type RecoverToVaultEventFilter = TypedEventFilter<RecoverToVaultEvent>;

export interface IVaultRecoverable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultRecoverableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferToVault(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferToVault(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferToVault(token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "RecoverToVault(address,address,uint256)"(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): RecoverToVaultEventFilter;
  };

  estimateGas: {
    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToVault(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToVault(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
