/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface IMembershipTemplateInterface extends utils.Interface {
  functions: {
    "newInstance(string,address[],uint64[3],uint64,bool,uint256[4])": FunctionFragment;
    "newInstance(string,address[],uint64[3],uint64,bool)": FunctionFragment;
    "newToken(string,string)": FunctionFragment;
    "newTokenAndInstance(string,string,string,address[],uint64[3],uint64,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "newInstance(string,address[],uint64[3],uint64,bool,uint256[4])"
      | "newInstance(string,address[],uint64[3],uint64,bool)"
      | "newToken"
      | "newTokenAndInstance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "newInstance(string,address[],uint64[3],uint64,bool,uint256[4])",
    values: [
      string,
      string[],
      [BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      boolean,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newInstance(string,address[],uint64[3],uint64,bool)",
    values: [
      string,
      string[],
      [BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "newTokenAndInstance",
    values: [
      string,
      string,
      string,
      string[],
      [BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      boolean
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "newInstance(string,address[],uint64[3],uint64,bool,uint256[4])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newInstance(string,address[],uint64[3],uint64,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newTokenAndInstance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMembershipTemplate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMembershipTemplateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "newInstance(string,address[],uint64[3],uint64,bool,uint256[4])"(
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      _payrollSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newInstance(string,address[],uint64[3],uint64,bool)"(
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newToken(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newTokenAndInstance(
      _tokenName: string,
      _tokenSymbol: string,
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  "newInstance(string,address[],uint64[3],uint64,bool,uint256[4])"(
    _id: string,
    _members: string[],
    _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
    _financePeriod: BigNumberish,
    _useAgentAsVault: boolean,
    _payrollSettings: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newInstance(string,address[],uint64[3],uint64,bool)"(
    _id: string,
    _members: string[],
    _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
    _financePeriod: BigNumberish,
    _useAgentAsVault: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newToken(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newTokenAndInstance(
    _tokenName: string,
    _tokenSymbol: string,
    _id: string,
    _members: string[],
    _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
    _financePeriod: BigNumberish,
    _useAgentAsVault: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "newInstance(string,address[],uint64[3],uint64,bool,uint256[4])"(
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      _payrollSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "newInstance(string,address[],uint64[3],uint64,bool)"(
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    newToken(
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    newTokenAndInstance(
      _tokenName: string,
      _tokenSymbol: string,
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    "newInstance(string,address[],uint64[3],uint64,bool,uint256[4])"(
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      _payrollSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newInstance(string,address[],uint64[3],uint64,bool)"(
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newToken(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newTokenAndInstance(
      _tokenName: string,
      _tokenSymbol: string,
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "newInstance(string,address[],uint64[3],uint64,bool,uint256[4])"(
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      _payrollSettings: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newInstance(string,address[],uint64[3],uint64,bool)"(
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newToken(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newTokenAndInstance(
      _tokenName: string,
      _tokenSymbol: string,
      _id: string,
      _members: string[],
      _votingSettings: [BigNumberish, BigNumberish, BigNumberish],
      _financePeriod: BigNumberish,
      _useAgentAsVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
